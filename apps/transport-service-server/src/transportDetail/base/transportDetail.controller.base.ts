/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TransportDetailService } from "../transportDetail.service";
import { TransportDetailCreateInput } from "./TransportDetailCreateInput";
import { TransportDetail } from "./TransportDetail";
import { TransportDetailFindManyArgs } from "./TransportDetailFindManyArgs";
import { TransportDetailWhereUniqueInput } from "./TransportDetailWhereUniqueInput";
import { TransportDetailUpdateInput } from "./TransportDetailUpdateInput";

export class TransportDetailControllerBase {
  constructor(protected readonly service: TransportDetailService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TransportDetail })
  async createTransportDetail(
    @common.Body() data: TransportDetailCreateInput
  ): Promise<TransportDetail> {
    return await this.service.createTransportDetail({
      data: {
        ...data,

        invoice: data.invoice
          ? {
              connect: data.invoice,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        invoice: {
          select: {
            id: true,
          },
        },

        scheduleDate: true,
        transportationMode: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TransportDetail] })
  @ApiNestedQuery(TransportDetailFindManyArgs)
  async transportDetails(
    @common.Req() request: Request
  ): Promise<TransportDetail[]> {
    const args = plainToClass(TransportDetailFindManyArgs, request.query);
    return this.service.transportDetails({
      ...args,
      select: {
        createdAt: true,
        id: true,

        invoice: {
          select: {
            id: true,
          },
        },

        scheduleDate: true,
        transportationMode: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TransportDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async transportDetail(
    @common.Param() params: TransportDetailWhereUniqueInput
  ): Promise<TransportDetail | null> {
    const result = await this.service.transportDetail({
      where: params,
      select: {
        createdAt: true,
        id: true,

        invoice: {
          select: {
            id: true,
          },
        },

        scheduleDate: true,
        transportationMode: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TransportDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTransportDetail(
    @common.Param() params: TransportDetailWhereUniqueInput,
    @common.Body() data: TransportDetailUpdateInput
  ): Promise<TransportDetail | null> {
    try {
      return await this.service.updateTransportDetail({
        where: params,
        data: {
          ...data,

          invoice: data.invoice
            ? {
                connect: data.invoice,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          invoice: {
            select: {
              id: true,
            },
          },

          scheduleDate: true,
          transportationMode: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TransportDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTransportDetail(
    @common.Param() params: TransportDetailWhereUniqueInput
  ): Promise<TransportDetail | null> {
    try {
      return await this.service.deleteTransportDetail({
        where: params,
        select: {
          createdAt: true,
          id: true,

          invoice: {
            select: {
              id: true,
            },
          },

          scheduleDate: true,
          transportationMode: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
