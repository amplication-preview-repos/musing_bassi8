/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TransportDetail } from "./TransportDetail";
import { TransportDetailCountArgs } from "./TransportDetailCountArgs";
import { TransportDetailFindManyArgs } from "./TransportDetailFindManyArgs";
import { TransportDetailFindUniqueArgs } from "./TransportDetailFindUniqueArgs";
import { CreateTransportDetailArgs } from "./CreateTransportDetailArgs";
import { UpdateTransportDetailArgs } from "./UpdateTransportDetailArgs";
import { DeleteTransportDetailArgs } from "./DeleteTransportDetailArgs";
import { Invoice } from "../../invoice/base/Invoice";
import { TransportDetailService } from "../transportDetail.service";
@graphql.Resolver(() => TransportDetail)
export class TransportDetailResolverBase {
  constructor(protected readonly service: TransportDetailService) {}

  async _transportDetailsMeta(
    @graphql.Args() args: TransportDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TransportDetail])
  async transportDetails(
    @graphql.Args() args: TransportDetailFindManyArgs
  ): Promise<TransportDetail[]> {
    return this.service.transportDetails(args);
  }

  @graphql.Query(() => TransportDetail, { nullable: true })
  async transportDetail(
    @graphql.Args() args: TransportDetailFindUniqueArgs
  ): Promise<TransportDetail | null> {
    const result = await this.service.transportDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TransportDetail)
  async createTransportDetail(
    @graphql.Args() args: CreateTransportDetailArgs
  ): Promise<TransportDetail> {
    return await this.service.createTransportDetail({
      ...args,
      data: {
        ...args.data,

        invoice: args.data.invoice
          ? {
              connect: args.data.invoice,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TransportDetail)
  async updateTransportDetail(
    @graphql.Args() args: UpdateTransportDetailArgs
  ): Promise<TransportDetail | null> {
    try {
      return await this.service.updateTransportDetail({
        ...args,
        data: {
          ...args.data,

          invoice: args.data.invoice
            ? {
                connect: args.data.invoice,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TransportDetail)
  async deleteTransportDetail(
    @graphql.Args() args: DeleteTransportDetailArgs
  ): Promise<TransportDetail | null> {
    try {
      return await this.service.deleteTransportDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Invoice, {
    nullable: true,
    name: "invoice",
  })
  async getInvoice(
    @graphql.Parent() parent: TransportDetail
  ): Promise<Invoice | null> {
    const result = await this.service.getInvoice(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
