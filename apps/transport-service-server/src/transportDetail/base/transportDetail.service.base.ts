/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TransportDetail as PrismaTransportDetail,
  Invoice as PrismaInvoice,
} from "@prisma/client";

export class TransportDetailServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TransportDetailCountArgs, "select">
  ): Promise<number> {
    return this.prisma.transportDetail.count(args);
  }

  async transportDetails(
    args: Prisma.TransportDetailFindManyArgs
  ): Promise<PrismaTransportDetail[]> {
    return this.prisma.transportDetail.findMany(args);
  }
  async transportDetail(
    args: Prisma.TransportDetailFindUniqueArgs
  ): Promise<PrismaTransportDetail | null> {
    return this.prisma.transportDetail.findUnique(args);
  }
  async createTransportDetail(
    args: Prisma.TransportDetailCreateArgs
  ): Promise<PrismaTransportDetail> {
    return this.prisma.transportDetail.create(args);
  }
  async updateTransportDetail(
    args: Prisma.TransportDetailUpdateArgs
  ): Promise<PrismaTransportDetail> {
    return this.prisma.transportDetail.update(args);
  }
  async deleteTransportDetail(
    args: Prisma.TransportDetailDeleteArgs
  ): Promise<PrismaTransportDetail> {
    return this.prisma.transportDetail.delete(args);
  }

  async getInvoice(parentId: string): Promise<PrismaInvoice | null> {
    return this.prisma.transportDetail
      .findUnique({
        where: { id: parentId },
      })
      .invoice();
  }
}
